#!/bin/bash
set -euo pipefail

###############################
# Check and Retrieve Arguments
###############################
if [ "$#" -ne 4 ]; then
    echo "Usage: $0 <config> <cpu_configuration> <cachesweep> <associativity>"
    exit 1
fi
CONFIG="$1"
CPU_CONFIG="$2"
CACHE_SWEEP="$3"
ASSOCIATIVITY="$4"

###############################
# Configuration Variables
###############################
MAX_JOBS=4
RESULTS_DIR="benchmark_results"
GEM5_CMD="/u/csc368h/winter/pub/bin/gem5.opt"

# Benchmark configurations
BENCHMARKS=(
  "sort:/u/csc368h/winter/pub/workloads/pbbsbench/benchmarks/comparisonSort/sampleSort/sort input_file"
  "bfs:/u/csc368h/winter/pub/workloads/pbbsbench/benchmarks/breadthFirstSearch/backForwardBFS/BFS input_file"
  "hist:/u/csc368h/winter/pub/workloads/pbbsbench/benchmarks/histogram/sequential/histogram input_file"
  "msf:/u/csc368h/winter/pub/workloads/pbbsbench/benchmarks/minSpanningForest/serialMST/MST input_file"
  "lrs:/u/csc368h/winter/pub/workloads/pbbsbench/benchmarks/longestRepeatedSubstring/doubling/lrs input_file"
)

# Input sizes
INPUT_SIZES=(100)

###############################
# Phase 1: Input File Generation
###############################
generate_input() {
  local bench_name="$1"
  local input_size="$2"
  local data_dir="$RESULTS_DIR/data/$bench_name/$input_size"
  mkdir -p "$data_dir"
  local input_file="$data_dir/input_${bench_name}_${input_size}"

  case "$bench_name" in
    sort|hist)
      /u/csc368h/winter/pub/workloads/pbbsbench/testData/sequenceData/randomSeq "$input_size" "$input_file"
      ;;
    bfs)
      local tmpfile
      tmpfile=$(mktemp)
      /u/csc368h/winter/pub/workloads/pbbsbench/testData/graphData/gridGraph "$input_size" "$tmpfile"
      /u/csc368h/winter/pub/workloads/pbbsbench/testData/graphData/edgeArrayToAdj -o "$input_file" "$tmpfile"
      rm "$tmpfile"
      ;;
    msf)
      local tmpfile
      tmpfile=$(mktemp)
      /u/csc368h/winter/pub/workloads/pbbsbench/testData/graphData/gridGraph "$input_size" "$tmpfile"
      /u/csc368h/winter/pub/workloads/pbbsbench/testData/graphData/addWeights "$tmpfile" "$input_file"
      rm "$tmpfile"
      ;;
    lrs)
      head -c "$input_size" string.txt > "$input_file"
      ;;
    *)
      echo "Unknown benchmark: $bench_name" >&2
      exit 1
      ;;
  esac

  echo "$input_file"
}

echo "Generating all input files..."
for bench_entry in "${BENCHMARKS[@]}"; do
  bench_name=$(echo "$bench_entry" | cut -d':' -f1)
  for input_size in "${INPUT_SIZES[@]}"; do
    generate_input "$bench_name" "$input_size"
  done
done
echo "Input file generation complete."

###############################
# Phase 2: Run Benchmarks (Piping Inputs)
###############################
run_benchmark() {
  local bench_entry="$1"
  local bench_name
  bench_name=$(echo "$bench_entry" | cut -d':' -f1)
  local bench_cmd_template
  bench_cmd_template=$(echo "$bench_entry" | cut -d':' -f2-)
  local bench_cmd=${bench_cmd_template//input_file/}

  for input_size in "${INPUT_SIZES[@]}"; do
    local input_file="$RESULTS_DIR/data/$bench_name/$input_size/input_${bench_name}_${input_size}"
    local outdir="$RESULTS_DIR/${bench_name}/${CPU_CONFIG}/${CACHE_SWEEP}/ass${ASSOCIATIVITY}/m5out${input_size}"
    mkdir -p "$outdir"
    
    echo "Running $bench_name, input size: $input_size, CPU: $CPU_CONFIG, cachesweep: $CACHE_SWEEP, associativity: $ASSOCIATIVITY"
    echo "Command: $GEM5_CMD --outdir=$outdir $CONFIG $bench_cmd -a $input_file"
    
    "$GEM5_CMD" --outdir="$outdir" $CONFIG $bench_cmd -a "$input_file" > "${outdir}/sim.log" 2>&1 &
  done
  wait
}

echo "Running benchmarks..."
for bench_entry in "${BENCHMARKS[@]}"; do
  run_benchmark "$bench_entry" &
  while [ "$(jobs -r -p | wc -l)" -ge "$MAX_JOBS" ]; do
    wait -n
  done
done
wait

echo "All benchmarks completed. Results are stored under the '$RESULTS_DIR' folder."
echo "For example, simulation logs are located in:"
echo "  $RESULTS_DIR/<benchmark>/${CPU_CONFIG}/${CACHE_SWEEP}/ass${ASSOCIATIVITY}/m5out<inputsize>/sim.log"
